// Code generated by "templplaygroundgenerator"; DO NOT EDIT.
package handlers

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/jfbus/templ-components/cmd/templplayground/views/components"
	"github.com/jfbus/templ-components/components/accordion"
	"github.com/jfbus/templ-components/components/button"
	"github.com/jfbus/templ-components/components/buttongroup"
	"github.com/jfbus/templ-components/components/checkbox"
	"github.com/jfbus/templ-components/components/icon"
	"github.com/jfbus/templ-components/components/inline"
	"github.com/jfbus/templ-components/components/input"
	"github.com/jfbus/templ-components/components/label"
	"github.com/jfbus/templ-components/components/radio"
	"github.com/jfbus/templ-components/components/radiogroup"
	"github.com/jfbus/templ-components/components/selectfield"
	"github.com/jfbus/templ-components/components/table"
	"github.com/jfbus/templ-components/components/textarea"
)

var binder = &echo.DefaultBinder{}
func ViewComponent(c echo.Context) error {
	switch c.Param("component") {
		case "Accordion":
			def := accordion.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.AccordionViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Button":
			def := button.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.ButtonViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Buttongroup":
			def := buttongroup.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.ButtongroupViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Checkbox":
			def := checkbox.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.CheckboxViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Icon":
			def := icon.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.IconViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Inline":
			def := inline.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.InlineViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Input":
			def := input.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.InputViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Label":
			def := label.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.LabelViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Radio":
			def := radio.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.RadioViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Radiogroup":
			def := radiogroup.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.RadiogroupViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Selectfield":
			def := selectfield.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.SelectfieldViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Table":
			def := table.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.TableViewer(def).Render(c.Request().Context(), c.Response().Writer)
		case "Textarea":
			def := textarea.D{}
			err := Bind(c.Request(), &def)
			if err != nil {
				return c.String(http.StatusBadRequest, err.Error())
			}
			components.TextareaViewer(def).Render(c.Request().Context(), c.Response().Writer)
	}
	return nil 
}
